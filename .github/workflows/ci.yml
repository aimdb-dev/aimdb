name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Format and lint using Makefile
  format-and-lint:
    name: Format and Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-format-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy on all valid feature combinations
      run: make clippy

  # Build and test using Makefile (valid combinations)
  makefile-build:
    name: Makefile Build & Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: thumbv7em-none-eabihf
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-makefile-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build all valid feature combinations
      run: make build
    
    - name: Test all valid feature combinations
      run: make test
    
    - name: Test embedded cross-compilation
      run: make test-embedded

  # Feature validation using Makefile
  feature-validation:
    name: Feature Flag Validation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-validation-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Validate feature combinations (invalid should fail)
      run: make test-feature-validation

  # Embedded target testing
  embedded-targets:
    name: Embedded Cross-compilation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: thumbv7em-none-eabihf
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-embedded-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check embedded core
      run: cargo check --package aimdb-core --target thumbv7em-none-eabihf --features embedded
    
    - name: Check embassy adapter
      run: cargo check --package aimdb-embassy-adapter --target thumbv7em-none-eabihf --features embassy-runtime
    
    - name: Verify embassy adapter with tracing
      run: cargo check --package aimdb-embassy-adapter --target thumbv7em-none-eabihf --features "embassy-runtime,tracing"

  # Adapter-specific testing
  adapters:
    name: Runtime Adapters
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        adapter: ["tokio", "embassy"]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: thumbv7em-none-eabihf
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.adapter }}-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Test tokio adapter
      if: matrix.adapter == 'tokio'
      run: |
        # Test basic tokio adapter
        cargo test --package aimdb-tokio-adapter --features tokio-runtime
        
        # Test with observability
        cargo test --package aimdb-tokio-adapter --features "tokio-runtime,tracing"
        
        # Test with observability
        cargo test --package aimdb-tokio-adapter --features "tokio-runtime,tracing,metrics"
    
    - name: Test embassy adapter
      if: matrix.adapter == 'embassy'
      run: |
        # Test basic embassy adapter (cross-compilation check)
        cargo check --package aimdb-embassy-adapter --target thumbv7em-none-eabihf --features embassy-runtime
        
        # Test with tracing
        cargo check --package aimdb-embassy-adapter --target thumbv7em-none-eabihf --features "embassy-runtime,tracing"

  # Comprehensive validation using Makefile
  comprehensive-check:
    name: Comprehensive Development Check
    runs-on: ubuntu-latest
    needs: [format-and-lint, makefile-build, feature-validation, embedded-targets, adapters]
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: thumbv7em-none-eabihf
    
    - name: Cache dependencies  
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-comprehensive-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run comprehensive development check
      run: make check
    
    - name: Build examples
      run: cargo build --package aimdb-examples
    
    - name: Generate documentation
      run: make doc
